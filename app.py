import os
import time
from typing import Any

import requests
import streamlit as st
from dotenv import find_dotenv, load_dotenv
import google.generativeai as genai
from transformers import pipeline

from utils.custom import css_code

load_dotenv(find_dotenv())
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")


genai.configure(
    api_key=GOOGLE_API_KEY,
    transport='rest',  
    client_options={'api_endpoint': 'generativelanguage.googleapis.com'}
)


def progress_bar(amount_of_time: int) -> Any:
    """
    A very simple progress bar the increases over time,
    then disappears when it reached completion
    :param amount_of_time: time taken
    :return: None
    """
    progress_text = "Please wait, Generative models hard at work"
    my_bar = st.progress(0, text=progress_text)

    for percent_complete in range(amount_of_time):
        time.sleep(0.04)
        my_bar.progress(percent_complete + 1, text=progress_text)
    time.sleep(1)
    my_bar.empty()


def generate_text_from_image(url: str) -> str:
    """
    A function that uses the blip model to generate text from an image.
    :param url: image location
    :return: text: generated text from the image
    """
    image_to_text: Any = pipeline("image-to-text", model="Salesforce/blip-image-captioning-base")

    generated_text: str = image_to_text(url)[0]["generated_text"]

    print(f"IMAGE INPUT: {url}")
    print(f"GENERATED TEXT OUTPUT: {generated_text}")
    return generated_text


def generate_story_from_text(scenario: str) -> str:
    """
    A function using Google Gemini to generate a short story. 
    Using native Google GenerativeAI library for better compatibility
    :param scenario: generated text from the image
    :return: generated story from the text
    """
    prompt_template = f"""
    You are a talented story teller who can create a story from a simple narrative.
    Create a story using the following scenario; the story should have be maximum 50 words long;
    
    CONTEXT: {scenario}
    STORY:
    """

    # Using native Google Gemini API
    # Using gemini-2.5-flash - latest stable fast model

    model = genai.GenerativeModel('models/gemini-2.5-flash')
    
    # Generate the story
    response = model.generate_content(prompt_template)
    
    # Extract the text from response
    generated_story: str = response.text if response.text else ""

    print(f"TEXT INPUT: {scenario}")
    print(f"GENERATED STORY OUTPUT: {generated_story}")
    return generated_story


def generate_speech_from_text(message: str) -> Any:
    """
    A function using gTTS (Google Text-to-Speech) to generate audio locally
    :param message: short story generated by the GPT model
    :return: generated audio from the short story
    """
    print("\n" + "="*60)
    print("STARTING SPEECH GENERATION")
    print("="*60)
    
    print(f"Input text length: {len(message)} characters")
    print(f"Input text: {message[:100]}...")
    print("\nGenerating speech using gTTS (Google Text-to-Speech)...")
    
    try:
        from gtts import gTTS
        
        # Create TTS object
        tts = gTTS(text=message, lang='en', slow=False)
        
        audio_filename = "generated_audio.mp3"
        print(f"Saving audio to: {audio_filename}")
        
        # Save to file
        tts.save(audio_filename)
        
        # Check if file was created successfully
        import os
        if os.path.exists(audio_filename):
            file_size = os.path.getsize(audio_filename)
            print(f"‚úÖ Audio file created successfully!")
            print(f"   File: {audio_filename}")
            print(f"   Size: {file_size} bytes")
        else:
            print("ERROR: Audio file was not created!")
                
    except ImportError:
        print("ERROR: gTTS library not installed!")
        print("   Run: pip install gtts")
    except Exception as e:
        print(f"   EXCEPTION occurred during speech generation:")
        print(f"   Error type: {type(e).__name__}")
        print(f"   Error message: {str(e)}")
        import traceback
        print(f"   Traceback:\n{traceback.format_exc()}")
    
    print("="*60)
    print("SPEECH GENERATION COMPLETE")
    print("="*60 + "\n")


def main() -> None:
    """
    Main function
    :return: None
    """
    st.set_page_config(page_title= "IMAGE TO STORY CONVERTER", page_icon= "üñºÔ∏è")

    st.markdown(css_code, unsafe_allow_html=True)

    with st.sidebar:
        st.image("img/gkj.jpg")
        st.write("---")
        st.write("AI App created by @ Arundhati Das")

    st.header("Image-to-Story Converter")
    uploaded_file: Any = st.file_uploader("Please choose a file to upload", type="jpg")

    if uploaded_file is not None:
        print(uploaded_file)
        bytes_data: Any = uploaded_file.getvalue()
        with open(uploaded_file.name, "wb") as file:
            file.write(bytes_data)
        st.image(uploaded_file, caption="Uploaded Image",
                 use_column_width=True)
        progress_bar(100)
        scenario: str = generate_text_from_image(uploaded_file.name)
        story: str = generate_story_from_text(scenario)
        generate_speech_from_text(story)

        with st.expander("Generated Image scenario"):
            st.write(scenario)
        with st.expander("Generated short story"):
            st.write(story)

        st.audio("generated_audio.mp3")


if __name__ == "__main__":
    main()